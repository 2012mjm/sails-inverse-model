#!/usr/bin/env node

'use strict';

var meow = require('meow');
var mysqldesc = require('mysqldesc');
var gencode = require('gencode');
var ansi = require('ansi-styles');
var ProgressBar = require('progress');
var Beautifier = require('node-js-beautify');
var b = new Beautifier();
var compiler = require('./utils/compiler');

var yesNoWords = require('./');

var cli = meow([
	'Examples',
	'  $ sails-inverse-model --help',
	'  ...',
	'',
	'  $ sails-inverse-model -u root -p root -d sys -f /home/julian/Documentos/sails/sails-inverse-model/test/api',
	'  User:	 root',
	'  Password: root',
	'  Database: sys',
	'  Host:	 localhost',
	'  Output folder:	 /home/julian/Documentos/Node_Projects/sails-inverse-model/test/api',
 	'  tablas',
	'  ===============================================================================================',
	'  ',
	'  complete',
	'  ...',
	'',
	'Options',
	'  -u, --user  User of mysql',
	'  -p, --pass  Password of mysql',
	'  -d, --database	Database of mysql',
	'  -h, --host	Host server mysql		Default: localhost',
	'  -f, --folder	Folder output	Default: Folder actual',
	//'  --type  Type of word: yes|no|all  Default: all',
	//'  --neez  Type of word: yes|no|all  Default: all',
]);

//var type = cli.flags.type || 'all';

var user, pass, db, host, port, folder;

//User mysql
if (cli.flags.u || cli.flags.user) {
	user = cli.flags.u || cli.flags.user;
}

//Password
if (cli.flags.p || cli.flags.pass) {
	pass = cli.flags.p || cli.flags.pass;
}

//Database
if (cli.flags.d || cli.flags.database) {
	db = cli.flags.d || cli.flags.database;
}

//Host of Mysql
if (cli.flags.h || cli.flags.host) {
	host = cli.flags.h || cli.flags.host;
} else {
	host = "localhost";
}

//Folder output
if (cli.flags.f || cli.flags.folder) {
	folder = cli.flags.f || cli.flags.folder;
} else {
	folder = process.cwd();
}

console.log("User:\t", ansi.green.open + user + ansi.green.close);
console.log("Password:", ansi.green.open + pass + ansi.green.close);
console.log("Database:", ansi.green.open + db + ansi.green.close);
console.log("Host:\t", ansi.green.open + host + ansi.green.close);
console.log("Output folder:\t", ansi.green.open + folder + ansi.green.close);

if (db && pass && user && host) {
	// Mysql connect config.
	var config = {
		user: user,
		password: pass,
		host: host,
		database: db
	};

	// Describe connected database
	mysqldesc(config, function(err, data) {
		if (err) {
			console.log("ERROR: ", err);
		} else {
			var sails = [],
				cantidad = 0;
			console.log([data.length, "tablas"].join(" "));
			for (var tt in data) { // table: Name table
				cantidad++;
			}
			//			console.log(">",cantidad);
			var bar = new ProgressBar(':bar', {
				total: cantidad
			});
			for (var table in data) { // table: Name table
				var salida = "";
				if (data.hasOwnProperty(table)) {
					//console.log(table + " = " + JSON.stringify(data[table], null, 4));
					//salida = salida.concat(tabl.toLowerCase() + ": {");
					salida = salida.concat("attributes: {");
					for (var colum in data[table]) {
						salida += compiler.toSailsAttribute(data[table][colum], colum) + ", ";
					}
					salida = compiler.quitComma(salida).concat("} ");
				}
				var model = salida.replace('\\', '');
				//console.log(model);
				var file = (table + ".js");
				//console.log(b.beautify_js(toModel(model), {}));
				gencode.save(b.beautify_js(toModel(model)), folder, file).then((value) => {
					//console.log([ansi.green.open, table + "> ", value, ansi.green.close].join(" "));
					//console.log(file);
					bar.tick();
					if (bar.complete) {
						console.log('\ncomplete\n');
					}
				}, (err) => {
					console.log([ansi.red.open, "ERROR", err, ansi.red.close].join("\n"));
				})

				sails.push(model);
			}
			/*sails.map((item, i) => {
				console.log("Tabla " + i + ">\n" + item);
			});*/
		}
	});
}

function toModel(model_basic) {
	var out = [];
	out.push("/**");
	out.push("\tGenerated by sails-inverse-model");
	out.push("\tDate:" + (new Date()));
	out.push("*/\n");
	out.push("module.exports = {");
	out.push(model_basic);
	out.push("};");
	return out.join("\n");
}

//console.log(cli.flags.all ? yesNoWords[type].join('\n') : yesNoWords[type + 'Random'].join('\n'));
